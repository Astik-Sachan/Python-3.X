Comment #line , '''block'''
type(variable) #ttype of the Variable
dir # functions in the workspace

single line multi assignment
DataTypes
	Text Type:		str
	Numeric Types:	int, float, complex -> { a=1+3j }
	Sequence Types:	list, tuple, range
	Mapping Type:	dict
	Set Types:		set, frozenset
	Boolean Type:	bool
	Binary Types:	bytes, bytearray, memoryview
	None Type:	 	NoneType
	
True + True + False = 1 + 1 + 0 = 2
String Append  +
String Repeat  *
a = input("ENTER : ") #{A will be string}


range(stop)
range(start, stop, step)

len(<iterable>)

#Slice Notations
s = "0123456789"
s[4:7]  # Output : 456
s[4:10:2] #Output : 468
s[-1:-10:-1] #Output : 987654321
s[::-1] # Output : 9876543210   (Reverses the String)

#List manipulations
Method    | Description
append()    Adds an element at the end of the list
clear()     Removes all the elements from the list
copy()      Retums a copy of the list
count()     Retumns the number of elements with the specified value
extend()    Add the elements of a list (or any iterable), to the end of the current list
index()     Retums the index of the first element with the specified value
insert()    Adds an element at the specified position
pop()       Removes the element at the specified position
remove()    Removes the item with the specified value
reverse()   Reverses the order of the list
sort()      Sorts the list

#tuple
count(Arg) : how many items of Arg are there
index(Arg) : gives you the first index of the arg if available

#set
Method	Description
add()			Adds an element to the set
clear()			Removes all the elements from the set
copy()			Returns a copy of the set
difference()	Returns a set containing the difference between two or more sets
difference_update()			Removes the items in this set that are also included in another, specified set
discard()			    Remove the specified item
intersection()			Returns a set, that is the intersection of two or more sets
intersection_update()		Removes the items in this set that are not present in other, specified set(s)
isdisjoint()		Returns whether two sets have a intersection or not
issubset()			Returns whether another set contains this set or not
issuperset()		Returns whether this set contains another set or not
pop()		    	Removes an element from the set
remove()			Removes the specified element
symmetric_difference()			Returns a set with the symmetric differences of two sets
symmetric_difference_update()	inserts the symmetric differences from this set and another
union()			Return a set containing the union of sets
update()		Update the set with another set, or any other iterable

#Dictionary
Method	Description
clear()	Removes all the elements from the dictionary
copy()	Returns a copy of the dictionary
fromkeys()	Returns a dictionary with the specified keys and value
get()	Returns the value of the specified key
items()	Returns a list containing a tuple for each key value pair
keys()	Returns a list containing the dictionary's keys
pop()	Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary